# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ctf')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ctf')
    _ctf = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ctf', [dirname(__file__)])
        except ImportError:
            import _ctf
            return _ctf
        try:
            _mod = imp.load_module('_ctf', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ctf = swig_import_helper()
    del swig_import_helper
else:
    import _ctf
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def is_menu_option(inp: 'char const *', max: 'int') -> "int":
    return _ctf.is_menu_option(inp, max)
is_menu_option = _ctf.is_menu_option

def are_same_str(str1: 'char const *', str2: 'char const *') -> "int":
    return _ctf.are_same_str(str1, str2)
are_same_str = _ctf.are_same_str

def kg_to_lb(kg: 'float') -> "float":
    return _ctf.kg_to_lb(kg)
kg_to_lb = _ctf.kg_to_lb

def cm_to_ft(cm: 'float') -> "float":
    return _ctf.cm_to_ft(cm)
cm_to_ft = _ctf.cm_to_ft

def cal_eaten(cal_per_serving: 'float', servings: 'float') -> "float":
    return _ctf.cal_eaten(cal_per_serving, servings)
cal_eaten = _ctf.cal_eaten

def bmr(kg: 'float', cm: 'float', age: 'float', gender: 'char const') -> "float":
    return _ctf.bmr(kg, cm, age, gender)
bmr = _ctf.bmr

def basal_cal(bmr: 'float', level: 'char const') -> "float":
    return _ctf.basal_cal(bmr, level)
basal_cal = _ctf.basal_cal

def cal_goal(basal_cal: 'float', goal: 'char const') -> "float":
    return _ctf.cal_goal(basal_cal, goal)
cal_goal = _ctf.cal_goal

def bmi(weight: 'float', height: 'float') -> "float":
    return _ctf.bmi(weight, height)
bmi = _ctf.bmi

def explain_activity_level(level: 'char const') -> "char const *":
    return _ctf.explain_activity_level(level)
explain_activity_level = _ctf.explain_activity_level

def explain_goal(goal: 'char const') -> "char const *":
    return _ctf.explain_goal(goal)
explain_goal = _ctf.explain_goal

def get_gender_str(gender: 'char const') -> "char const *":
    return _ctf.get_gender_str(gender)
get_gender_str = _ctf.get_gender_str


